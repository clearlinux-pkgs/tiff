--- orig/tools/pal2rgb.c	2018-11-10 15:33:11.000000000 +0000
+++ patched/tools/pal2rgb.c	2019-01-14 23:15:47.701458686 +0000
@@ -77,7 +77,7 @@
 	uint16 *rmap, *gmap, *bmap;
 	uint32 row;
 	int cmap = -1;
-	TIFF *in, *out;
+	TIFF *in = NULL, *out = NULL;
 	int c;
 
 #if !HAVE_DECL_OPTARG
@@ -118,24 +118,24 @@
 	    shortv != PHOTOMETRIC_PALETTE) {
 		fprintf(stderr, "%s: Expecting a palette image.\n",
 		    argv[optind]);
-		return (-1);
+		goto error1;
 	}
 	if (!TIFFGetField(in, TIFFTAG_COLORMAP, &rmap, &gmap, &bmap)) {
 		fprintf(stderr,
 		    "%s: No colormap (not a valid palette image).\n",
 		    argv[optind]);
-		return (-1);
+		goto error1;
 	}
 	bitspersample = 0;
 	TIFFGetField(in, TIFFTAG_BITSPERSAMPLE, &bitspersample);
 	if (bitspersample != 8) {
 		fprintf(stderr, "%s: Sorry, can only handle 8-bit images.\n",
 		    argv[optind]);
-		return (-1);
+		goto error1;
 	}
 	out = TIFFOpen(argv[optind+1], "w");
 	if (out == NULL)
-		return (-2);
+		goto error2;
 	cpTags(in, out);
 	TIFFGetField(in, TIFFTAG_IMAGEWIDTH, &imagewidth);
 	TIFFGetField(in, TIFFTAG_IMAGELENGTH, &imagelength);
@@ -193,7 +193,7 @@
 		 * buffer overflow. Go ahead and fail now to prevent that.
 		 */
 		fprintf(stderr, "Could not determine correct image size for output. Exiting.\n");
-		return -1;
+		goto error1;
       }
 	  ibuf = (unsigned char*)_TIFFmalloc(tss_in);
 	  obuf = (unsigned char*)_TIFFmalloc(tss_out);
@@ -238,6 +238,16 @@
 	(void) TIFFClose(in);
 	(void) TIFFClose(out);
 	return (0);
+
+error1:
+	if (in) TIFFClose(in);
+	if (out) TIFFClose(out);
+	return -1;
+
+error2:
+	if (in) TIFFClose(in);
+	if (out) TIFFClose(out);
+	return -2;
 }
 
 static int
